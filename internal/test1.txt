alignv:center bgColor:silver:#e0e0e0:#e0e0e0:#e0e0e0:#e0e0e0:silver lineSpacing:2 size:20 padding:20 round:20 maxheight:512 width:712  rect:tg align:left  delay:100 minHeight:100 minWidth:300
align:center color:green:red:green:V:0:50:100:50 date:now  time:now
break:page wwет Й равна eeeeee13 AЙЙЙd
Обратите внимание, что эта 5555ошиjjjgбка будет сообщаться только в том сЙЙЙлуjчае,
break:page delay:100 alignV:top align:center Gbgcolor:transparent1 Затем мы читаем resp.Body, color:1transparent0 котоЙрый реализует интерфейс io.Read Clo ser, и мы 
7 55555555jЙ5555 Й5555555555555555j4 time:now

fontsize:40 8G88888123456789123456789123456789123456789 8
fontsize:20

break:page alignH:top  align:left maxwidth:712       если wwwвозникла пQЙроблЙЙа с 
align:left  подключением к серверу и получением
ответа.  Однако, если сервер отправляет http  ответ 502 fontSize2:20 (что является внутренней ошибкой сервера), вы получите этот код состояния
 ee wwww1 

break:page  bgColor:#0000AA:blue:#000088 maxwidth:700 align:center color:red 
\ и сообщение об ошибке на соответствующем объекте, а не в переменной err. color:white ttt Затем мы читаем resp.Body,  который реализует интерфейс io.ReadCloser, и мы  можем использовать ioutilj.ReadAll,
break:center2 align:right maxwidth:700
чтобы полностью прочитать ответ. Эта функция также возвращает два значения - байтовый срез ([]byte) и err. Опять же, мы проверяем любые возможные ошибки при чтении тела ответа. jЕсли ошибок 
break:page alignH:bottom  1не было, мы печатаем тело.  Обратите внимание на string(body). Здесь мы преобразуем байтовый срез в строку. Если мы этого не сделаем, log.Println будет распечатывать представление байтового фрагмента, списка всех байтов в этом фрагменте, индивидуально. Но нам 
alignH:top3 1нужно строковое представление. Поэтому мы идем вперед и делаем преобразование.

break:page alignH:top Мы увидим, что напечатанный вывод представляет собой JSON объект в виде строки. Итак, в следующем примере мы увидим, как мы можем отправлять и читать сообщения в формате JSON.

color:yellow Отправка и получение запросов в JSON
Тозможные ошибки при чтении тела ответа. Если ошибок не было, мы печатаем тело. Обратите вниманзование объекта в JSON и отправляла запрос с требуемыми заголовками. В Go, однако, все более явно и меньше магии, что на самом деле хорошо. Вы будете знать, что делаете и как вы это делаете.

В Go мы сначала преобразуем нашу структуру данных в байтовый срез, содержащий JSON-представление данных. Затем мы передаем его запросу с соответствующим типом контента. Давайте посмотрим на пример кода:
align:left Мы создали отдельную функцию MakeRequest и вызвали ее из нашей основной функции. Внутри этой функции мы передали URL-адрес http.Get и получили два значения - объект ответа и переменную с ошибками, которые могли произойти во время вызова. Мы проверили, есть ли какие-либо ошибки. Если ошибок не было, ошибка будет равна nil. Обратите внимание, что эта ошибка будет сообщаться только в том случае, если возникла проблема с подключением к серверу и получением ответа. Однако, если сервер отправляет http ответ 500 (что является внутренней ошибкой сервера), вы получите этот код состояния и сообщение об ошибке на соответствующем объекте, а не в переменной err.

Затем мы читаем resp.Body, который реализует интерфейс io.ReadCloser, и мы можем использовать ioutil.ReadAll, чтобы полностью прочитать ответ. Эта функция также возвращает два значения - байтовый срез ([]byte) и err. Опять же, мы проверяем любые возможные ошибки при чтении тела ответа. Если ошибок не было, мы печатаем тело. Обратите внимание на string(body). Здесь мы преобразуем байтовый срез в строку. Если мы этого не сделаем, log.Println будет распечатывать представление байтового фрагмента, списка всех байтов в этом фрагменте, индивидуально. Но нам нужно строковое представление. Поэтому мы идем вперед и делаем преобразование.

Мы увидим, alignv:center что напечатанный вывод представляет собой JSON объект в виде строки. Итак, в следующем примере мы увидим, как мы можем отправлять и читать сообщения в формате JSON.
break:page   bgcolor:silver  color:red Отправка и получение запросов в JSON
Теперь давайте отправим сообщение в формате JSON. Как мы это сделаем? Если вы пришли из Python/Node/Ruby, вы возможно уже использовали для формирования JSON объектов (словари), далее предавали их в свою любимую библиотеку и устанавливали нужный формат передачи данных. Ваша библиотека выполняла для вас преобразование объекта в JSON и отправляла запрос с требуемыми заголовками. В Go, однако, все более явно и меньше магии, что на самом деле хорошо. Вы будете знать, что делаете и как вы это делаете.
В Go мы сначала преобразуем нашу структуру данных в байтовый срез, содержащий JSON-представление данных. Затем мы передаем его запросу с соответствующим типом контента. Давайте посмотрим на пример ЙKода: 
break:center5JSON
break:page width:712 align:center
121212121
232323
34343434
54545
break:page color:red Конец!
